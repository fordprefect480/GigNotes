<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Caliburn.Micro.Extras</name>
    </assembly>
    <members>
        <member name="T:Caliburn.Micro.Extras.ActionCommand">
            <summary>
            Wraps a ViewModel method (with guard) in an <see cref="T:System.Windows.Input.ICommand"/>.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Extras.ActionCommand.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Micro.Extras.ActionCommand"/> class.
            </summary>
            <param name="target">The target.</param>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:Caliburn.Micro.Extras.ActionCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Caliburn.Micro.Extras.ActionCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
            <returns>true if this command can be executed; otherwise, false.</returns>
        </member>
        <member name="E:Caliburn.Micro.Extras.ActionCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether the command should execute.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.Extras.ContentHost">
            <summary>
            Custom <see cref="T:System.Windows.Controls.ContentControl"/> that caches all views so that it can quickly switch between them.
            </summary>
            <remarks>
            Models have to implement <see cref="T:Caliburn.Micro.IDeactivate"/> so views can be cached.
            </remarks>
        </member>
        <member name="F:Caliburn.Micro.Extras.ContentHost.CurrentModelProperty">
            <summary>
            A dependency property for attaching a model to the UI.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.Extras.ContentHost.CurrentModel">
            <summary>
            Gets or sets the current model.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.Extras.DebugLogger">
            <summary>
              A simple logger thats logs everything to the debugger.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Extras.DebugLogger.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Micro.Extras.DebugLogger"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Caliburn.Micro.Extras.DebugLogger.Info(System.String,System.Object[])">
            <summary>
            Logs the message as info.
            </summary>
            <param name="format">A formatted message.</param>
            <param name="args">Parameters to be injected into the formatted message.</param>
        </member>
        <member name="M:Caliburn.Micro.Extras.DebugLogger.Warn(System.String,System.Object[])">
            <summary>
            Logs the message as a warning.
            </summary>
            <param name="format">A formatted message.</param>
            <param name="args">Parameters to be injected into the formatted message.</param>
        </member>
        <member name="M:Caliburn.Micro.Extras.DebugLogger.Error(System.Exception)">
            <summary>
            Logs the exception.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:Caliburn.Micro.Extras.ContinueResultDecorator">
            <summary>
            A result decorator which executes a coroutine when the wrapped result was cancelled.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.Extras.ResultDecoratorBase">
            <summary>
            Base class for all <see cref="T:Caliburn.Micro.IResult"/> decorators.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Extras.ResultDecoratorBase.#ctor(Caliburn.Micro.IResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Micro.Extras.ResultDecoratorBase"/> class.
            </summary>
            <param name="result">The result to decorate.</param>
        </member>
        <member name="M:Caliburn.Micro.Extras.ResultDecoratorBase.Execute(Caliburn.Micro.ActionExecutionContext)">
            <summary>
            Executes the result using the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.Micro.Extras.ResultDecoratorBase.OnInnerResultCompleted(Caliburn.Micro.IResult,Caliburn.Micro.ResultCompletionEventArgs)">
            <summary>
            Called when the execution of the decorated result has completed.
            </summary>
            <param name="innerResult">The decorated result.</param>
            <param name="args">The <see cref="T:Caliburn.Micro.ResultCompletionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Caliburn.Micro.Extras.ResultDecoratorBase.OnCompleted(Caliburn.Micro.ResultCompletionEventArgs)">
            <summary>
            Raises the <see cref="E:Caliburn.Micro.Extras.ResultDecoratorBase.Completed"/> event.
            </summary>
            <param name="args">The <see cref="T:Caliburn.Micro.ResultCompletionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Caliburn.Micro.Extras.ResultDecoratorBase.Completed">
            <summary>
            Occurs when execution has completed.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Extras.ContinueResultDecorator.#ctor(Caliburn.Micro.IResult,System.Func{System.Collections.Generic.IEnumerable{Caliburn.Micro.IResult}})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Micro.Extras.ContinueResultDecorator"/> class.
            </summary>
            <param name="result">The result to decorate.</param>
            <param name="coroutine">The coroutine to execute when <paramref name="result"/> was canceled.</param>
        </member>
        <member name="M:Caliburn.Micro.Extras.ContinueResultDecorator.Execute(Caliburn.Micro.ActionExecutionContext)">
            <summary>
            Executes the result using the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.Micro.Extras.ContinueResultDecorator.OnInnerResultCompleted(Caliburn.Micro.IResult,Caliburn.Micro.ResultCompletionEventArgs)">
            <summary>
            Called when the execution of the decorated result has completed.
            </summary>
            <param name="innerResult">The decorated result.</param>
            <param name="args">The <see cref="T:Caliburn.Micro.ResultCompletionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Caliburn.Micro.Extras.OverrideCancelResultDecorator">
            <summary>
            A result decorator that overrides <see cref="F:Caliburn.Micro.ResultCompletionEventArgs.WasCancelled"/> of the decorated <see cref="T:Caliburn.Micro.IResult"/> instance.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Extras.OverrideCancelResultDecorator.#ctor(Caliburn.Micro.IResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Micro.Extras.OverrideCancelResultDecorator"/> class.
            </summary>
            <param name="result">The result to decorate.</param>
        </member>
        <member name="M:Caliburn.Micro.Extras.OverrideCancelResultDecorator.OnInnerResultCompleted(Caliburn.Micro.IResult,Caliburn.Micro.ResultCompletionEventArgs)">
            <summary>
            Called when the execution of the decorated result has completed.
            </summary>
            <param name="innerResult">The decorated result.</param>
            <param name="args">The <see cref="T:Caliburn.Micro.ResultCompletionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Caliburn.Micro.Extras.RescueResultDecorator`1">
            <summary>
            A result decorator which rescues errors from the decorated result by executing a rescue coroutine.
            </summary>
            <typeparam name="TException">The type of the exception we want to perform the rescue on</typeparam>
        </member>
        <member name="M:Caliburn.Micro.Extras.RescueResultDecorator`1.#ctor(Caliburn.Micro.IResult,System.Func{`0,System.Collections.Generic.IEnumerable{Caliburn.Micro.IResult}},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Micro.Extras.RescueResultDecorator`1"/> class.
            </summary>
            <param name="result">The result to decorate.</param>
            <param name="rescue">The rescue coroutine.</param>
            <param name="cancelResult">Set to true to cancel the result after executing rescue.</param>
        </member>
        <member name="M:Caliburn.Micro.Extras.RescueResultDecorator`1.Execute(Caliburn.Micro.ActionExecutionContext)">
            <summary>
            Executes the result using the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.Micro.Extras.RescueResultDecorator`1.OnInnerResultCompleted(Caliburn.Micro.IResult,Caliburn.Micro.ResultCompletionEventArgs)">
            <summary>
            Called when the execution of the decorated result has completed.
            </summary>
            <param name="innerResult">The decorated result.</param>
            <param name="args">The <see cref="T:Caliburn.Micro.ResultCompletionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Caliburn.Micro.Extras.EventAggregatorExtensions">
            <summary>
            Extensions for <see cref="T:Caliburn.Micro.IEventAggregator"/>.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Extras.EventAggregatorExtensions.PublishOnCurrentThread(Caliburn.Micro.IEventAggregator,System.Object)">
            <summary>
              Publishes a message on the current thread (synchrone).
            </summary>
            <param name="eventAggregator">The event aggregator.</param>
            <param name = "message">The message instance.</param>
        </member>
        <member name="M:Caliburn.Micro.Extras.EventAggregatorExtensions.PublishOnBackgroundThread(Caliburn.Micro.IEventAggregator,System.Object)">
            <summary>
              Publishes a message on a background thread (async).
            </summary>
            <param name="eventAggregator">The event aggregator.</param>
            <param name = "message">The message instance.</param>
        </member>
        <member name="M:Caliburn.Micro.Extras.EventAggregatorExtensions.PublishOnUIThread(Caliburn.Micro.IEventAggregator,System.Object)">
            <summary>
              Publishes a message on the UI thread.
            </summary>
            <param name="eventAggregator">The event aggregator.</param>
            <param name = "message">The message instance.</param>
        </member>
        <member name="M:Caliburn.Micro.Extras.EventAggregatorExtensions.BeginPublishOnUIThread(Caliburn.Micro.IEventAggregator,System.Object)">
            <summary>
              Publishes a message on the UI thread asynchrone.
            </summary>
            <param name="eventAggregator">The event aggregator.</param>
            <param name = "message">The message instance.</param>
        </member>
        <member name="T:Caliburn.Micro.Extras.WeakEventHandler">
            <summary>
            Helper class to add weak handlers to events.
            </summary>
            <remarks>
            Access to the event and to the real event handler is done through lambda expressions.
            The code holds strong references to these expressions, so they must not capture any
            variables!
            </remarks>
            <example>
            <code>
            WeakEventHandler.Register(
            	eh => textDocument.Changed += eh,
            	eh => textDocument.Changed -= eh,
            	this,
            	(me, sender, args) => me.OnDocumentChanged(sender, args),
            	h => new TextChangedEventHandler(h)
            );
            </code>
            </example>
        </member>
        <member name="M:Caliburn.Micro.Extras.WeakEventHandler.Deregister">
            <summary>
            Deregisters this handler.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Extras.WeakEventHandler.Register``3(System.Action{``0},System.Action{``0},``2,System.Action{``2,System.Object,``1},System.Func{System.EventHandler{``1},``0})">
            <summary>
            Registers a weak event handler on a event.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Extras.WeakEventHandler.Register``2(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}},``1,System.Action{``1,System.Object,``0})">
            <summary>
            Registers a weak event handler on a generic event.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Extras.WeakEventHandler.RegisterPropertyChanged``1(System.ComponentModel.INotifyPropertyChanged,``0,System.Action{``0,System.Object,System.ComponentModel.PropertyChangedEventArgs})">
            <summary>
            Registers  a weak event handler on property changed event.
            </summary>
            <typeparam name="TEventListener">The type of the event listener.</typeparam>
            <param name="source">The event source.</param>
            <param name="listeningObject">The listening object.</param>
            <param name="forwardAction">The forward action.</param>
        </member>
        <member name="T:Caliburn.Micro.Extras.IModuleBootstrapper">
            <summary>
            Interface for module bootstrappers.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Extras.IModuleBootstrapper.Initialize">
            <summary>
            Initializes the module.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.Extras.ModuleConventions">
            <summary>
            Conventions installer for ExternalModules support.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Extras.ModuleConventions.Install">
            <summary>
            Installs the conventions needed for <see cref="T:Caliburn.Micro.Extras.IModuleBootstrapper"/>.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Extras.ModuleConventions.InitializeAssembly(System.Reflection.Assembly)">
            <summary>
            Initializes the assembly.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="T:Caliburn.Micro.Extras.ResultExtensions">
            <summary>
            Extension methods for <see cref="T:Caliburn.Micro.IResult"/> instances.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Extras.ResultExtensions.WhenCancelled(Caliburn.Micro.IResult,System.Func{System.Collections.Generic.IEnumerable{Caliburn.Micro.IResult}})">
            <summary>
            Adds behavior to the result which is executed when the <paramref name = "result" /> was cancelled.
            </summary>
            <param name="result">The result to decorate.</param>
            <param name="coroutine">The coroutine to execute when <paramref name="result"/> was canceled.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Micro.Extras.ResultExtensions.OverrideCancel(Caliburn.Micro.IResult)">
            <summary>
            Overrides <see cref="F:Caliburn.Micro.ResultCompletionEventArgs.WasCancelled"/> of the decorated <paramref name="result"/> instance.
            </summary>
            <param name="result">The result to decorate.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Micro.Extras.ResultExtensions.Rescue``1(Caliburn.Micro.IResult,System.Func{``0,System.Collections.Generic.IEnumerable{Caliburn.Micro.IResult}},System.Boolean)">
            <summary>
            Rescues <typeparamref name = "TException" /> from the decorated <paramref name = "result" /> by executing a <paramref name = "rescue" /> coroutine.
            </summary>
            <typeparam name = "TException">The type of the exception we want to perform the rescue on.</typeparam>
            <param name="result">The result to decorate.</param>
            <param name="rescue">The rescue coroutine.</param>
            <param name="cancelResult">Set to true to cancel the result after executing rescue.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Micro.Extras.ResultExtensions.Rescue(Caliburn.Micro.IResult,System.Func{System.Exception,System.Collections.Generic.IEnumerable{Caliburn.Micro.IResult}},System.Boolean)">
            <summary>
            Rescues any exception from the decorated <paramref name = "result" /> by executing a <paramref name = "rescue" /> coroutine.
            </summary>
            <param name="result">The result to decorate.</param>
            <param name="rescue">The rescue coroutine.</param>
            <param name="cancelResult">Set to true to cancel the result after executing rescue.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.Micro.Extras.CancelResult">
            <summary>
            A result that is always canceled.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Extras.CancelResult.Execute(Caliburn.Micro.ActionExecutionContext)">
            <summary>
            Executes the result using the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="E:Caliburn.Micro.Extras.CancelResult.Completed">
            <summary>
            Occurs when execution has completed.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.Extras.DelegateResult">
            <summary>
            A result that executes an <see cref="T:System.Action"/>.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Extras.DelegateResult.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Micro.Extras.DelegateResult"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Caliburn.Micro.Extras.DelegateResult.Execute(Caliburn.Micro.ActionExecutionContext)">
            <summary>
            Executes the result using the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="E:Caliburn.Micro.Extras.DelegateResult.Completed">
            <summary>
            Occurs when execution has completed.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.Extras.DelegateResult`1">
            <summary>
            A result that executes a <see cref="T:System.Func`1"/>
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Caliburn.Micro.Extras.DelegateResult`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Micro.Extras.DelegateResult`1"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Caliburn.Micro.Extras.DelegateResult`1.Execute(Caliburn.Micro.ActionExecutionContext)">
            <summary>
            Executes the result using the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Caliburn.Micro.Extras.DelegateResult`1.Result">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="E:Caliburn.Micro.Extras.DelegateResult`1.Completed">
            <summary>
            Occurs when execution has completed.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.Extras.MessengerResult">
            <summary>
            A Caliburn.Micro Result that lets you show messages.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Extras.MessengerResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Micro.Extras.MessengerResult"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Caliburn.Micro.Extras.MessengerResult.Caption(System.String)">
            <summary>
            Sets the caption.
            </summary>
            <param name="text">The caption text.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Micro.Extras.MessengerResult.Buttons(Caliburn.Micro.Extras.MessageButton)">
            <summary>
            Sets the button.
            </summary>
            <param name="buttons">The button.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Micro.Extras.MessengerResult.Image(Caliburn.Micro.Extras.MessageImage)">
            <summary>
            Sets the image.
            </summary>
            <param name="icon">The image.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Micro.Extras.MessengerResult.Execute(Caliburn.Micro.ActionExecutionContext)">
            <summary>
            Executes the result using the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Caliburn.Micro.Extras.MessengerResult.Result">
            <summary>
            Gets the message
            </summary>
        </member>
        <member name="E:Caliburn.Micro.Extras.MessengerResult.Completed">
            <summary>
            Occurs when execution has completed.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.Extras.OpenFileResult`1">
            <summary>
            A Caliburn.Micro Result that lets you open a file.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Caliburn.Micro.Extras.OpenFileResult`1.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Micro.Extras.OpenFileResult`1"/> class.
            </summary>
            <param name="multiselect">Determines wether it is allows to select multiple files.</param>
            <param name="title">The title of the dialog.</param>
        </member>
        <member name="M:Caliburn.Micro.Extras.OpenFileResult`1.Execute(Caliburn.Micro.ActionExecutionContext)">
            <summary>
            Executes the result using the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.Micro.Extras.OpenFileResult`1.OnCompleted(Caliburn.Micro.Extras.IOpenFileService,Caliburn.Micro.ResultCompletionEventArgs)">
            <summary>
            Handles the completion of the execution.
            </summary>
            <param name="openFileService">The open file service.</param>
            <param name="args">The <see cref="T:Caliburn.Micro.ResultCompletionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Caliburn.Micro.Extras.OpenFileResult`1.FilterFiles(System.String)">
            <summary>
            Create file filter for the dialog.
            </summary>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Micro.Extras.OpenFileResult`1.In(System.String)">
            <summary>
            Sets the initial <paramref name = "directory" /> of the dialog
            </summary>
            <param name="directory">The directory.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Micro.Extras.OpenFileResult`1.OneFile(System.String)">
            <summary>
            Open a single file.
            </summary>
            <param name="title">The title of the dialog.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Micro.Extras.OpenFileResult`1.MultipleFiles(System.String)">
            <summary>
            Open multiple files.
            </summary>
            <param name="title">The title of the dialog.</param>
            <returns></returns>
        </member>
        <member name="P:Caliburn.Micro.Extras.OpenFileResult`1.Result">
            <summary>
            Gets the opened file(s).
            </summary>
        </member>
        <member name="E:Caliburn.Micro.Extras.OpenFileResult`1.Completed">
            <summary>
            Occurs when execution has completed.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.Extras.SaveFileResult">
            <summary>
            A Caliburn.Micro Result that lets you save a file.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Extras.SaveFileResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Micro.Extras.SaveFileResult"/> class.
            </summary>
            <param name="title">The title of the dialog.</param>
        </member>
        <member name="M:Caliburn.Micro.Extras.SaveFileResult.Execute(Caliburn.Micro.ActionExecutionContext)">
            <summary>
            Executes the result using the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.Micro.Extras.SaveFileResult.OnCompleted(Caliburn.Micro.Extras.ISaveFileSerivce,Caliburn.Micro.ResultCompletionEventArgs)">
            <summary>
            Handles the completion of the execution.
            </summary>
            <param name="saveFileSerivce">The save file service.</param>
            <param name="args">The <see cref="T:Caliburn.Micro.ResultCompletionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Caliburn.Micro.Extras.SaveFileResult.FilterFiles(System.String,System.String)">
            <summary>
            Create file filter for the dialog.
            </summary>
            <param name="filter">The file type filter.</param>
            <param name="defaultExtension">The default file name extension applied to files that are saved.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Micro.Extras.SaveFileResult.In(System.String)">
            <summary>
            Sets the initial <paramref name = "directory" /> of the dialog
            </summary>
            <param name="directory">The directory.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Micro.Extras.SaveFileResult.OneFile(System.String)">
            <summary>
            Save a single file.
            </summary>
            <param name="title">The title of the dialog.</param>
            <returns></returns>
        </member>
        <member name="P:Caliburn.Micro.Extras.SaveFileResult.Result">
            <summary>
            Gets the opened file(s).
            </summary>
        </member>
        <member name="E:Caliburn.Micro.Extras.SaveFileResult.Completed">
            <summary>
            Occurs when execution has completed.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.Extras.MessageResult">
            <summary>
            Available message results.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.Extras.MessageResult.None">
            <summary>
            No result available.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.Extras.MessageResult.OK">
            <summary>
            Message is acknowledged.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.Extras.MessageResult.Cancel">
            <summary>
            Message is canceled.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.Extras.MessageResult.Yes">
            <summary>
            Message is acknowledged with yes.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.Extras.MessageResult.No">
            <summary>
            Message is acknowledged with no.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.Extras.MessageButton">
            <summary>
            Available message buttons.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.Extras.MessageButton.OK">
            <summary>
            OK button.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.Extras.MessageButton.OKCancel">
            <summary>
            OK and Cancel buttons.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.Extras.MessageButton.YesNoCancel">
            <summary>
            Yes, No and Cancel buttons.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.Extras.MessageButton.YesNo">
            <summary>
            Yes and No buttons.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.Extras.MessageImage">
            <summary>
            Available message images.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.Extras.MessageImage.None">
            <summary>
            Show no image.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.Extras.MessageImage.Error">
            <summary>
            Error image.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.Extras.MessageImage.Question">
            <summary>
            Question image.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.Extras.MessageImage.Warning">
            <summary>
            Warning image.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.Extras.MessageImage.Information">
            <summary>
            Information image.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.Extras.IMessageService">
            <summary>
            Interface for the message service.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Extras.IMessageService.Show(System.String,System.String,Caliburn.Micro.Extras.MessageButton,Caliburn.Micro.Extras.MessageImage)">
            <summary>
            Shows the specified message and returns the result.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <param name="icon">The icon.</param>
            <returns>The <see cref="T:Caliburn.Micro.Extras.MessageResult"/>.</returns>
        </member>
        <member name="T:Caliburn.Micro.Extras.IOpenFileService">
            <summary>
            Interface for the Open File service.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Extras.IOpenFileService.DetermineFile">
            <summary>
            Determines the filename of the file what will be used.
            </summary>
            <returns><c>true</c> if a file is selected; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Caliburn.Micro.Extras.IOpenFileService.File">
            <summary>
            Gets a <see cref="T:System.IO.FileInfo"/> object for the selected file. If multiple files are selected, returns the first selected file.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.Extras.IOpenFileService.Files">
            <summary>
            Gets a collection of <see cref="T:System.IO.FileInfo"/> objects for the selected files.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.Extras.IOpenFileService.Filter">
            <summary>
            Gets or sets a filter string that specifies the file types and descriptions to display.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.Extras.IOpenFileService.Multiselect">
            <summary>
            Gets or sets a value indicating whether this instance is allows to select multiple files.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.Extras.ISaveFileSerivce">
            <summary>
            Interface for the Save File service.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Extras.ISaveFileSerivce.DetermineFile">
            <summary>
            Determines the filename of the file what will be used.
            </summary>
            <returns><c>true</c> if a file is selected; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Caliburn.Micro.Extras.ISaveFileSerivce.OpenFile">
            <summary>
            Opens the file specified by the <see cref="P:Caliburn.Micro.Extras.ISaveFileSerivce.SafeFileName"/> property.
            </summary>
            <returns>A read-write stream for the file.</returns>
        </member>
        <member name="P:Caliburn.Micro.Extras.ISaveFileSerivce.DefaultExt">
            <summary>
            Gets or sets the default file name extension applied to files that are saved.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.Extras.ISaveFileSerivce.Filter">
            <summary>
            Gets or sets a filter string that specifies the files types and descriptions to display.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.Extras.ISaveFileSerivce.SafeFileName">
            <summary>
            Gets the file name for the selected file.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.Extras.MessageService">
            <summary>
            Message service that implements the <see cref="T:Caliburn.Micro.Extras.IMessageService"/> by using the <see cref="T:System.Windows.MessageBox"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Extras.MessageService.Show(System.String,System.String,Caliburn.Micro.Extras.MessageButton,Caliburn.Micro.Extras.MessageImage)">
            <summary>
            Shows the specified message and returns the result.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <param name="icon">The icon.</param>
            <returns>The <see cref="T:Caliburn.Micro.Extras.MessageResult"/>.</returns>
        </member>
        <member name="T:Caliburn.Micro.Extras.OpenFileService">
            <summary>
            Service to open files.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Extras.OpenFileService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Micro.Extras.OpenFileService"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Extras.OpenFileService.DetermineFile">
            <summary>
            Determines the filename of the file what will be used.
            </summary>
            <returns>
              <c>true</c> if a file is selected; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:Caliburn.Micro.Extras.OpenFileService.File">
            <summary>
            Gets a <see cref="T:System.IO.FileInfo"/> object for the selected file. If multiple files are selected, returns the first selected file.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.Extras.OpenFileService.Files">
            <summary>
            Gets a collection of <see cref="T:System.IO.FileInfo"/> objects for the selected files.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.Extras.OpenFileService.Filter">
            <summary>
            Gets or sets a filter string that specifies the file types and descriptions to display.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.Extras.OpenFileService.Multiselect">
            <summary>
            Gets or sets a value indicating whether this instance is allows to select multiple files.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.Extras.SaveFileService">
            <summary>
            Service to save files.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Extras.SaveFileService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Micro.Extras.SaveFileService"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Extras.SaveFileService.DetermineFile">
            <summary>
            Determines the filename of the file what will be used.
            </summary>
            <returns>
              <c>true</c> if a file is selected; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.Micro.Extras.SaveFileService.OpenFile">
            <summary>
            Opens the file specified by the <see cref="P:Caliburn.Micro.Extras.SaveFileService.SafeFileName"/> property.
            </summary>
            <returns>
            A read-write stream for the file.
            </returns>
        </member>
        <member name="P:Caliburn.Micro.Extras.SaveFileService.DefaultExt">
            <summary>
            Gets or sets the default file name extension applied to files that are saved.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.Extras.SaveFileService.Filter">
            <summary>
            Gets or sets a filter string that specifies the files types and descriptions to display.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.Extras.SaveFileService.SafeFileName">
            <summary>
            Gets the file name for the selected file.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.Extras.WeakEventSource`1">
            <summary>
            A class for managing a weak event.
            </summary>
            <typeparam name="TEventHandler">The type of the event handler.</typeparam>
        </member>
        <member name="M:Caliburn.Micro.Extras.WeakEventSource`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Micro.Extras.WeakEventSource`1"/> class.
            </summary>
            <param name="invokationsToCompileDelegate">The number of invokations on which the delegate will be compiled.</param>
        </member>
        <member name="M:Caliburn.Micro.Extras.WeakEventSource`1.Add(`0)">
            <summary>
            Adds the specified EventHandler.
            </summary>
            <param name="eh">The EventHandler.</param>
        </member>
        <member name="M:Caliburn.Micro.Extras.WeakEventSource`1.Remove(`0)">
            <summary>
            Removes the specified EventHandler.
            </summary>
            <param name="eh">The EventHandler.</param>
        </member>
        <member name="M:Caliburn.Micro.Extras.WeakEventSource`1.Raise(System.Object,System.EventArgs)">
            <summary>
            Raises the event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Caliburn.Micro.Extras.DataAnnotationsValidator">
            <summary>
            Helper class to use <see cref="N:System.ComponentModel.DataAnnotations"/> attributes for validation.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Extras.DataAnnotationsValidator.Validate``1(``0)">
            <summary>
            Validates the specified instance.
            </summary>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Micro.Extras.DataAnnotationsValidator.Validate``1(``0,System.String)">
            <summary>
            Validates the specified property.
            </summary>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
            <param name="instance">The instance.</param>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Micro.Extras.DataAnnotationsValidator.Validate``2(``0,System.Linq.Expressions.Expression{System.Func{``1}})">
            <summary>
            Validates the specified property.
            </summary>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="instance">The instance.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.Micro.Extras.DataErrorInfoAdapter`1">
            <summary>
            Adapter for <see cref="T:System.ComponentModel.IDataErrorInfo"/>.
            </summary>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
        </member>
        <member name="M:Caliburn.Micro.Extras.DataErrorInfoAdapter`1.ValidateAll(`0)">
            <summary>
            Validates all properties.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Micro.Extras.DataErrorInfoAdapter`1.Validate(`0,System.String,System.Action{System.String,System.Collections.Generic.IList{System.String}})">
            <summary>
            Validates the specified property.
            </summary>
            <param name="instance">The instance.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="onValidation">The on validation callback.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Micro.Extras.DataErrorInfoAdapter`1.Validate``1(`0,System.Linq.Expressions.Expression{System.Func{``0}},System.Action{System.String,System.Collections.Generic.IList{System.String}})">
            <summary>
            Validates the specified property.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="instance">The instance.</param>
            <param name="property">The property.</param>
            <param name="onValidation">The on validation callback.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Micro.Extras.DataErrorInfoAdapter`1.GetPropertyError(System.String)">
            <summary>
            Gets the property error.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Micro.Extras.DataErrorInfoAdapter`1.GetPropertyError``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the property error.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Micro.Extras.DataErrorInfoAdapter`1.HasPropertyError(System.String)">
            <summary>
            Determines whether specified property has any errors.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Micro.Extras.DataErrorInfoAdapter`1.HasPropertyError``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Determines whether specified property has any errors.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="P:Caliburn.Micro.Extras.DataErrorInfoAdapter`1.Errors">
            <summary>
            Gets the validation errors.
            </summary>
        </member>
    </members>
</doc>
